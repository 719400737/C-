--整个代码的工作流程：
以一个请求来到具体的处理过程介绍项目工作流程，具体包括web端和服务器建立连接，访问服务器数据库完成登录和注册，并通过定时器完成非活动连接的处理，最后服务器运行状态通过日志系统进行记录。

--web端和服务器端建立连接
1.采用epoll的边缘触发模式同时监听多个文件描述符，采用同步I/O模拟proactor模式处理事件，主线程负责监听客户端是否发起请求
2.当web端发起http请求时，主线程接收请求报文，然后将任务插入请求队列，由工作线程通过竞争从请求队列中获取任务
3.通过http类中的主从状态机对请求报文进行分析，根据请求报文对客户端进行http响应，然后由主线程给客户端发送响应报文。
--连接数据库
单例模式创建数据库连接池，避免频繁建立连接，用于后续web端登录和注册校验访问服务器数据库

--实现web端的登录和注册
1.web访问的欢迎界面为GET请求，登录和注册界面是POST请求。
2.欢迎界面有新用户（0）和已有账号（1）两个选项，若选择新用户，会跳转注册(3)界面，注册成功或选择已有账号，跳转登录(2)界面，注册或登录失败会提示失败，成功和失败为0，1

--同步/异步日志系统，记录服务器运行状态

1.同步的方式下，工作线程直接写入日志文件
2.异步会另外创建一个写线程，工作线程将要写的内容push进请求队列，通过写线程写入文件
3.日志文件支持按日期分类，和超过最大行数自动创建新文件

--非活动连接的处理
1.由于非活跃连接占用了连接资源，严重影响服务器的性能，通过实现一个服务器定时器，处理这种非活跃连接，释放连接资源。
2.利用alarm函数周期性地触发SIGALRM信号,该信号的信号处理函数利用管道通知主循环执行定时器链表上的定时任务.

--数据库连接池：
基本思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已经建立的空闲的连接对象，使用完毕后，用户也并非将连接关闭，而是将连接池放回到连接池中，以供下一个请求访问使用。而连接的建立，断开，都由连接池自身来管理。

--线程池：
线程池是服务器预先创建的一组线程，这些线程运行着相同的代码，并具有相同的属性。当有新的任务到来的时候，主线程通过某种方式选择线程池中的某个线程为之服务，服务完之后将线程放回池中。

--半同步/半反应堆线程：
主线程和工作线程之间通过一个共享的工作队列来同步，工作线程睡眠在工作队列上，当有新的任务到来时，主线程将新的任务添加到工作队列，这将唤醒正在等待任务的工作线程，不过只有一个工作线程会获得新任务的接管权，他可以从工作队列中取出任务并执行，而其他的工作线程继续睡眠在工作队列上。
由于主线程和工作线程之间有一个工作队列，所以主线程和工作线程之间没有耦合性，主线程往工作队列中插入任务，睡眠的工作线程通过竞争来取得任务并执行它。
